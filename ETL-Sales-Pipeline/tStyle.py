# tStyle.py - Style and utility classes for Python Package Installer# Handles display formatting, user input, file operations for package collectionsimport osimport jsonfrom datetime import datetimefrom colorama import init, Foreinit(autoreset=True)class FileManager:    """Handles JSON file operations for package collections"""    def __init__(self):        pass    def load_json_file(self, file_path):        """Load JSON file content"""        try:            if os.path.exists(file_path):                with open(file_path, 'r', encoding='utf-8') as file:                    content = file.read().strip()                    if content:                        return json.loads(content)            return {}        except json.JSONDecodeError as e:            print(f"[ERROR] Corrupted JSON file {file_path}: {e}")            return {}        except Exception as e:            print(f"[ERROR] Loading {file_path} failed: {e}")            return {}    def save_json_file(self, file_path, data):        """Save data to JSON file"""        try:            with open(file_path, 'w', encoding='utf-8') as file:                json.dump(data, file, indent=2)            return True        except Exception as e:            print(f"[ERROR] Saving {file_path} failed: {e}")            return Falseclass BillingStyle:    """Handles all display formatting and user interface styling for package installer"""    def __init__(self, width=85):        self.width = width        self.separator = "=" * width        self.thin_separator = "-" * width    # -----------------------------    # Display Methods    # -----------------------------    def print_separator(self):        print(self.separator)    def print_thin_separator(self):        print(self.thin_separator)    def print_header(self, title):        self.print_separator()        print(title.center(self.width))        self.print_separator()    def print_section_title(self, title):        print(f"\n{title}")        self.print_thin_separator()    def print_menu(self, options):        for i, option in enumerate(options, 1):            print(f"{i}. {option}")        self.print_separator()    def print_success_message(self, message):        print(Fore.GREEN + f"[SUCCESS] {message}")        self.print_separator()    def print_error_message(self, message):        print(Fore.RED + f"[ERROR] {message}")        self.print_separator()    def print_info_message(self, message):        print(Fore.CYAN + f"[INFO] {message}")        self.print_separator()    def print_warning_message(self, message):        print(Fore.YELLOW + f"[WARNING] {message}")        self.print_separator()    def get_formatted_input(self, prompt, input_type="string"):        """Get validated input from user"""        try:            if input_type == "int":                while True:                    try:                        value = int(input(f"{prompt}: "))                        return value                    except ValueError:                        print("[ERROR] Enter a valid integer")            elif input_type == "float":                while True:                    try:                        value = float(input(f"{prompt}: "))                        return value                    except ValueError:                        print("[ERROR] Enter a valid number")            else:                return input(f"{prompt}: ").strip()        except KeyboardInterrupt:            return None        except Exception as e:            print(f"[ERROR] Input failed: {e}")            return None    def clear_screen(self):        """Clear console screen"""        try:            os.system('cls' if os.name == 'nt' else 'clear')        except Exception:            print("\n" * 50)class PackageLogger:    """Handles logging of installed/updated packages for audit purposes"""    def __init__(self, log_file="package_log.json"):        self.log_file = log_file        self.ensure_log_file()    def ensure_log_file(self):        if not os.path.exists(self.log_file):            try:                with open(self.log_file, 'w', encoding='utf-8') as f:                    json.dump([], f)            except Exception as e:                print(f"[WARNING] Could not create log file: {e}")    def log_package(self, package_name, version=None, action="installed"):        """Log package installation/update"""        try:            log_entry = {                "package": package_name,                "version": version,                "action": action,                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")            }            logs = self.load_logs()            logs.append(log_entry)            with open(self.log_file, 'w', encoding='utf-8') as f:                json.dump(logs, f, indent=2)        except Exception as e:            print(f"[WARNING] Failed to log package {package_name}: {e}")    def load_logs(self):        try:            with open(self.log_file, 'r', encoding='utf-8') as f:                content = f.read().strip()                if content:                    return json.loads(content)                return []        except Exception:            return []